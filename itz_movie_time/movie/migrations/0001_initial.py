# Generated by Django 3.2.9 on 2021-11-26 19:41

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import movie.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('total_no_of_seats', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('', 'Status'), ('confirmed', 'confirmed'), ('processing', 'processing'), ('cancelled', 'cancelled')], max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('', 'State'), ('MH', 'Maharashtra'), ('DL', 'Delhi'), ('KA', 'Karnataka'), ('TN', 'Tamil Nadu')], max_length=100, null=True)),
                ('name', models.CharField(choices=[('', 'City'), ('Mumbai', 'Mumbai'), ('Delhi', 'Delhi'), ('Banglore', 'Banglore'), ('Chennai', 'Chennai')], max_length=100, null=True)),
                ('zip_code', models.DecimalField(decimal_places=0, default=0, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('description', models.CharField(max_length=950)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('language', models.CharField(choices=[('', 'Language'), ('ENG', 'English'), ('HIN', 'Hindi'), ('KAN', 'KANNADA')], max_length=100, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to=movie.models.Movie.user_directory_path)),
                ('trailer_url', models.URLField(blank=True, max_length=150, null=True)),
                ('genre', models.CharField(choices=[('', 'Genre'), ('Drama', 'Drama'), ('Horror', 'Horror'), ('Comedy', 'Comedy'), ('Action', 'Action'), ('Romance', 'Romance'), ('Sci-Fi', 'Sci-Fi'), ('Fiction', 'Fiction'), ('Crime', 'Crime')], max_length=100, null=True)),
                ('rating', models.CharField(choices=[('', 'Rating'), ('A', 'A'), ('UA', 'UA')], max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Screen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('capacity', models.DecimalField(decimal_places=0, default=0, max_digits=100)),
            ],
        ),
        migrations.CreateModel(
            name='Screening',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('movie_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie.movie')),
                ('screen_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie.screen')),
            ],
        ),
        migrations.CreateModel(
            name='ScreenSeat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_no', models.CharField(max_length=50)),
                ('type', models.CharField(choices=[('', 'Seating'), ('', 'Classic'), ('', 'Premium')], max_length=50, null=True)),
                ('screen_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie.screen')),
            ],
        ),
        migrations.CreateModel(
            name='Theatre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('no_of_screens', models.DecimalField(decimal_places=0, default=0, max_digits=100)),
                ('city_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie.city')),
            ],
        ),
        migrations.CreateModel(
            name='ShowSeat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('', 'Status'), ('available', 'available'), ('booked', 'booked')], max_length=100, null=True)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=9)),
                ('type', models.CharField(choices=[('', 'Seating'), ('', 'Classic'), ('', 'Premium')], max_length=50, null=True)),
                ('booking_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie.booking')),
                ('screen_seat_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie.screenseat')),
                ('screening_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie.screening')),
            ],
        ),
        migrations.AddField(
            model_name='screen',
            name='theatre_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie.theatre'),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_no', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('payment_method', models.CharField(choices=[('', 'Payment mode'), ('', 'UPI'), ('', 'Credit Card'), ('', 'Debit Card')], max_length=50, null=True)),
                ('type', models.CharField(choices=[('', 'Seating'), ('', 'Classic'), ('', 'Premium')], max_length=50, null=True)),
                ('booking_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie.booking')),
            ],
        ),
        migrations.CreateModel(
            name='MovieCast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('image', models.ImageField(blank=True, null=True, upload_to=movie.models.MovieCast.user_directory_path)),
                ('character_name', models.CharField(max_length=150)),
                ('movie_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie.movie')),
            ],
        ),
        migrations.AddField(
            model_name='booking',
            name='screening_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie.screening'),
        ),
        migrations.AddField(
            model_name='booking',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
